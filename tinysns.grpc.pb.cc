// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tinysns.proto

#include "tinysns.pb.h"
#include "tinysns.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace tinysns {

static const char* TinySNS_method_names[] = {
  "/tinysns.TinySNS/GetMaster",
  "/tinysns.TinySNS/MasterUp",
  "/tinysns.TinySNS/MasterDown",
  "/tinysns.TinySNS/Login",
  "/tinysns.TinySNS/GetList",
  "/tinysns.TinySNS/Follow",
  "/tinysns.TinySNS/Unfollow",
  "/tinysns.TinySNS/GetTimeline",
  "/tinysns.TinySNS/PostTimeline",
};

std::unique_ptr< TinySNS::Stub> TinySNS::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< TinySNS::Stub> stub(new TinySNS::Stub(channel));
  return stub;
}

TinySNS::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetMaster_(TinySNS_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MasterUp_(TinySNS_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MasterDown_(TinySNS_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(TinySNS_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetList_(TinySNS_method_names[4], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Follow_(TinySNS_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Unfollow_(TinySNS_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTimeline_(TinySNS_method_names[7], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_PostTimeline_(TinySNS_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TinySNS::Stub::GetMaster(::grpc::ClientContext* context, const ::tinysns::NoMessage& request, ::tinysns::ServerInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMaster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tinysns::ServerInfo>* TinySNS::Stub::AsyncGetMasterRaw(::grpc::ClientContext* context, const ::tinysns::NoMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysns::ServerInfo>::Create(channel_.get(), cq, rpcmethod_GetMaster_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tinysns::ServerInfo>* TinySNS::Stub::PrepareAsyncGetMasterRaw(::grpc::ClientContext* context, const ::tinysns::NoMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysns::ServerInfo>::Create(channel_.get(), cq, rpcmethod_GetMaster_, context, request, false);
}

::grpc::Status TinySNS::Stub::MasterUp(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::tinysns::ReplyStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MasterUp_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* TinySNS::Stub::AsyncMasterUpRaw(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysns::ReplyStatus>::Create(channel_.get(), cq, rpcmethod_MasterUp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* TinySNS::Stub::PrepareAsyncMasterUpRaw(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysns::ReplyStatus>::Create(channel_.get(), cq, rpcmethod_MasterUp_, context, request, false);
}

::grpc::Status TinySNS::Stub::MasterDown(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::tinysns::ReplyStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MasterDown_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* TinySNS::Stub::AsyncMasterDownRaw(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysns::ReplyStatus>::Create(channel_.get(), cq, rpcmethod_MasterDown_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* TinySNS::Stub::PrepareAsyncMasterDownRaw(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysns::ReplyStatus>::Create(channel_.get(), cq, rpcmethod_MasterDown_, context, request, false);
}

::grpc::Status TinySNS::Stub::Login(::grpc::ClientContext* context, const ::tinysns::User& request, ::tinysns::ReplyStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* TinySNS::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysns::ReplyStatus>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* TinySNS::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysns::ReplyStatus>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false);
}

::grpc::ClientReader< ::tinysns::User>* TinySNS::Stub::GetListRaw(::grpc::ClientContext* context, const ::tinysns::User& request) {
  return ::grpc::internal::ClientReaderFactory< ::tinysns::User>::Create(channel_.get(), rpcmethod_GetList_, context, request);
}

::grpc::ClientAsyncReader< ::tinysns::User>* TinySNS::Stub::AsyncGetListRaw(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::tinysns::User>::Create(channel_.get(), cq, rpcmethod_GetList_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::tinysns::User>* TinySNS::Stub::PrepareAsyncGetListRaw(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::tinysns::User>::Create(channel_.get(), cq, rpcmethod_GetList_, context, request, false, nullptr);
}

::grpc::Status TinySNS::Stub::Follow(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::tinysns::ReplyStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Follow_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* TinySNS::Stub::AsyncFollowRaw(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysns::ReplyStatus>::Create(channel_.get(), cq, rpcmethod_Follow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* TinySNS::Stub::PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysns::ReplyStatus>::Create(channel_.get(), cq, rpcmethod_Follow_, context, request, false);
}

::grpc::Status TinySNS::Stub::Unfollow(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::tinysns::ReplyStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Unfollow_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* TinySNS::Stub::AsyncUnfollowRaw(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysns::ReplyStatus>::Create(channel_.get(), cq, rpcmethod_Unfollow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* TinySNS::Stub::PrepareAsyncUnfollowRaw(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysns::ReplyStatus>::Create(channel_.get(), cq, rpcmethod_Unfollow_, context, request, false);
}

::grpc::ClientReader< ::tinysns::Posting>* TinySNS::Stub::GetTimelineRaw(::grpc::ClientContext* context, const ::tinysns::User& request) {
  return ::grpc::internal::ClientReaderFactory< ::tinysns::Posting>::Create(channel_.get(), rpcmethod_GetTimeline_, context, request);
}

::grpc::ClientAsyncReader< ::tinysns::Posting>* TinySNS::Stub::AsyncGetTimelineRaw(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::tinysns::Posting>::Create(channel_.get(), cq, rpcmethod_GetTimeline_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::tinysns::Posting>* TinySNS::Stub::PrepareAsyncGetTimelineRaw(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::tinysns::Posting>::Create(channel_.get(), cq, rpcmethod_GetTimeline_, context, request, false, nullptr);
}

::grpc::Status TinySNS::Stub::PostTimeline(::grpc::ClientContext* context, const ::tinysns::NewPosting& request, ::tinysns::ReplyStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostTimeline_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* TinySNS::Stub::AsyncPostTimelineRaw(::grpc::ClientContext* context, const ::tinysns::NewPosting& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysns::ReplyStatus>::Create(channel_.get(), cq, rpcmethod_PostTimeline_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* TinySNS::Stub::PrepareAsyncPostTimelineRaw(::grpc::ClientContext* context, const ::tinysns::NewPosting& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysns::ReplyStatus>::Create(channel_.get(), cq, rpcmethod_PostTimeline_, context, request, false);
}

TinySNS::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinySNS_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinySNS::Service, ::tinysns::NoMessage, ::tinysns::ServerInfo>(
          std::mem_fn(&TinySNS::Service::GetMaster), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinySNS_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinySNS::Service, ::tinysns::ServerInfo, ::tinysns::ReplyStatus>(
          std::mem_fn(&TinySNS::Service::MasterUp), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinySNS_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinySNS::Service, ::tinysns::ServerInfo, ::tinysns::ReplyStatus>(
          std::mem_fn(&TinySNS::Service::MasterDown), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinySNS_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinySNS::Service, ::tinysns::User, ::tinysns::ReplyStatus>(
          std::mem_fn(&TinySNS::Service::Login), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinySNS_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TinySNS::Service, ::tinysns::User, ::tinysns::User>(
          std::mem_fn(&TinySNS::Service::GetList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinySNS_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinySNS::Service, ::tinysns::FollowOp, ::tinysns::ReplyStatus>(
          std::mem_fn(&TinySNS::Service::Follow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinySNS_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinySNS::Service, ::tinysns::FollowOp, ::tinysns::ReplyStatus>(
          std::mem_fn(&TinySNS::Service::Unfollow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinySNS_method_names[7],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TinySNS::Service, ::tinysns::User, ::tinysns::Posting>(
          std::mem_fn(&TinySNS::Service::GetTimeline), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinySNS_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinySNS::Service, ::tinysns::NewPosting, ::tinysns::ReplyStatus>(
          std::mem_fn(&TinySNS::Service::PostTimeline), this)));
}

TinySNS::Service::~Service() {
}

::grpc::Status TinySNS::Service::GetMaster(::grpc::ServerContext* context, const ::tinysns::NoMessage* request, ::tinysns::ServerInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinySNS::Service::MasterUp(::grpc::ServerContext* context, const ::tinysns::ServerInfo* request, ::tinysns::ReplyStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinySNS::Service::MasterDown(::grpc::ServerContext* context, const ::tinysns::ServerInfo* request, ::tinysns::ReplyStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinySNS::Service::Login(::grpc::ServerContext* context, const ::tinysns::User* request, ::tinysns::ReplyStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinySNS::Service::GetList(::grpc::ServerContext* context, const ::tinysns::User* request, ::grpc::ServerWriter< ::tinysns::User>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinySNS::Service::Follow(::grpc::ServerContext* context, const ::tinysns::FollowOp* request, ::tinysns::ReplyStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinySNS::Service::Unfollow(::grpc::ServerContext* context, const ::tinysns::FollowOp* request, ::tinysns::ReplyStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinySNS::Service::GetTimeline(::grpc::ServerContext* context, const ::tinysns::User* request, ::grpc::ServerWriter< ::tinysns::Posting>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinySNS::Service::PostTimeline(::grpc::ServerContext* context, const ::tinysns::NewPosting* request, ::tinysns::ReplyStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tinysns

