// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tinysns.proto
#ifndef GRPC_tinysns_2eproto__INCLUDED
#define GRPC_tinysns_2eproto__INCLUDED

#include "tinysns.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace tinysns {

class TinySNS final {
 public:
  static constexpr char const* service_full_name() {
    return "tinysns.TinySNS";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetMaster(::grpc::ClientContext* context, const ::tinysns::NoMessage& request, ::tinysns::ServerInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ServerInfo>> AsyncGetMaster(::grpc::ClientContext* context, const ::tinysns::NoMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ServerInfo>>(AsyncGetMasterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ServerInfo>> PrepareAsyncGetMaster(::grpc::ClientContext* context, const ::tinysns::NoMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ServerInfo>>(PrepareAsyncGetMasterRaw(context, request, cq));
    }
    virtual ::grpc::Status MasterUp(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::tinysns::ReplyStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>> AsyncMasterUp(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>>(AsyncMasterUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>> PrepareAsyncMasterUp(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>>(PrepareAsyncMasterUpRaw(context, request, cq));
    }
    virtual ::grpc::Status MasterDown(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::tinysns::ReplyStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>> AsyncMasterDown(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>>(AsyncMasterDownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>> PrepareAsyncMasterDown(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>>(PrepareAsyncMasterDownRaw(context, request, cq));
    }
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::tinysns::User& request, ::tinysns::ReplyStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>> AsyncLogin(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tinysns::User>> GetList(::grpc::ClientContext* context, const ::tinysns::User& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tinysns::User>>(GetListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tinysns::User>> AsyncGetList(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tinysns::User>>(AsyncGetListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tinysns::User>> PrepareAsyncGetList(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tinysns::User>>(PrepareAsyncGetListRaw(context, request, cq));
    }
    virtual ::grpc::Status Follow(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::tinysns::ReplyStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>> AsyncFollow(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>>(AsyncFollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>> PrepareAsyncFollow(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>>(PrepareAsyncFollowRaw(context, request, cq));
    }
    virtual ::grpc::Status Unfollow(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::tinysns::ReplyStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>> AsyncUnfollow(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>>(AsyncUnfollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>> PrepareAsyncUnfollow(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>>(PrepareAsyncUnfollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tinysns::Posting>> GetTimeline(::grpc::ClientContext* context, const ::tinysns::User& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tinysns::Posting>>(GetTimelineRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tinysns::Posting>> AsyncGetTimeline(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tinysns::Posting>>(AsyncGetTimelineRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tinysns::Posting>> PrepareAsyncGetTimeline(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tinysns::Posting>>(PrepareAsyncGetTimelineRaw(context, request, cq));
    }
    virtual ::grpc::Status PostTimeline(::grpc::ClientContext* context, const ::tinysns::NewPosting& request, ::tinysns::ReplyStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>> AsyncPostTimeline(::grpc::ClientContext* context, const ::tinysns::NewPosting& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>>(AsyncPostTimelineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>> PrepareAsyncPostTimeline(::grpc::ClientContext* context, const ::tinysns::NewPosting& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>>(PrepareAsyncPostTimelineRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ServerInfo>* AsyncGetMasterRaw(::grpc::ClientContext* context, const ::tinysns::NoMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ServerInfo>* PrepareAsyncGetMasterRaw(::grpc::ClientContext* context, const ::tinysns::NoMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>* AsyncMasterUpRaw(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>* PrepareAsyncMasterUpRaw(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>* AsyncMasterDownRaw(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>* PrepareAsyncMasterDownRaw(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>* AsyncLoginRaw(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::tinysns::User>* GetListRaw(::grpc::ClientContext* context, const ::tinysns::User& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tinysns::User>* AsyncGetListRaw(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tinysns::User>* PrepareAsyncGetListRaw(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>* AsyncFollowRaw(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>* PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>* AsyncUnfollowRaw(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>* PrepareAsyncUnfollowRaw(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::tinysns::Posting>* GetTimelineRaw(::grpc::ClientContext* context, const ::tinysns::User& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tinysns::Posting>* AsyncGetTimelineRaw(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tinysns::Posting>* PrepareAsyncGetTimelineRaw(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>* AsyncPostTimelineRaw(::grpc::ClientContext* context, const ::tinysns::NewPosting& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinysns::ReplyStatus>* PrepareAsyncPostTimelineRaw(::grpc::ClientContext* context, const ::tinysns::NewPosting& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetMaster(::grpc::ClientContext* context, const ::tinysns::NoMessage& request, ::tinysns::ServerInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ServerInfo>> AsyncGetMaster(::grpc::ClientContext* context, const ::tinysns::NoMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ServerInfo>>(AsyncGetMasterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ServerInfo>> PrepareAsyncGetMaster(::grpc::ClientContext* context, const ::tinysns::NoMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ServerInfo>>(PrepareAsyncGetMasterRaw(context, request, cq));
    }
    ::grpc::Status MasterUp(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::tinysns::ReplyStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>> AsyncMasterUp(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>>(AsyncMasterUpRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>> PrepareAsyncMasterUp(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>>(PrepareAsyncMasterUpRaw(context, request, cq));
    }
    ::grpc::Status MasterDown(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::tinysns::ReplyStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>> AsyncMasterDown(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>>(AsyncMasterDownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>> PrepareAsyncMasterDown(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>>(PrepareAsyncMasterDownRaw(context, request, cq));
    }
    ::grpc::Status Login(::grpc::ClientContext* context, const ::tinysns::User& request, ::tinysns::ReplyStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>> AsyncLogin(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tinysns::User>> GetList(::grpc::ClientContext* context, const ::tinysns::User& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tinysns::User>>(GetListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tinysns::User>> AsyncGetList(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tinysns::User>>(AsyncGetListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tinysns::User>> PrepareAsyncGetList(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tinysns::User>>(PrepareAsyncGetListRaw(context, request, cq));
    }
    ::grpc::Status Follow(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::tinysns::ReplyStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>> AsyncFollow(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>>(AsyncFollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>> PrepareAsyncFollow(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>>(PrepareAsyncFollowRaw(context, request, cq));
    }
    ::grpc::Status Unfollow(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::tinysns::ReplyStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>> AsyncUnfollow(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>>(AsyncUnfollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>> PrepareAsyncUnfollow(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>>(PrepareAsyncUnfollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tinysns::Posting>> GetTimeline(::grpc::ClientContext* context, const ::tinysns::User& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tinysns::Posting>>(GetTimelineRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tinysns::Posting>> AsyncGetTimeline(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tinysns::Posting>>(AsyncGetTimelineRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tinysns::Posting>> PrepareAsyncGetTimeline(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tinysns::Posting>>(PrepareAsyncGetTimelineRaw(context, request, cq));
    }
    ::grpc::Status PostTimeline(::grpc::ClientContext* context, const ::tinysns::NewPosting& request, ::tinysns::ReplyStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>> AsyncPostTimeline(::grpc::ClientContext* context, const ::tinysns::NewPosting& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>>(AsyncPostTimelineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>> PrepareAsyncPostTimeline(::grpc::ClientContext* context, const ::tinysns::NewPosting& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>>(PrepareAsyncPostTimelineRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::tinysns::ServerInfo>* AsyncGetMasterRaw(::grpc::ClientContext* context, const ::tinysns::NoMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinysns::ServerInfo>* PrepareAsyncGetMasterRaw(::grpc::ClientContext* context, const ::tinysns::NoMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* AsyncMasterUpRaw(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* PrepareAsyncMasterUpRaw(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* AsyncMasterDownRaw(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* PrepareAsyncMasterDownRaw(::grpc::ClientContext* context, const ::tinysns::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* AsyncLoginRaw(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::tinysns::User>* GetListRaw(::grpc::ClientContext* context, const ::tinysns::User& request) override;
    ::grpc::ClientAsyncReader< ::tinysns::User>* AsyncGetListRaw(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::tinysns::User>* PrepareAsyncGetListRaw(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* AsyncFollowRaw(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* AsyncUnfollowRaw(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* PrepareAsyncUnfollowRaw(::grpc::ClientContext* context, const ::tinysns::FollowOp& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::tinysns::Posting>* GetTimelineRaw(::grpc::ClientContext* context, const ::tinysns::User& request) override;
    ::grpc::ClientAsyncReader< ::tinysns::Posting>* AsyncGetTimelineRaw(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::tinysns::Posting>* PrepareAsyncGetTimelineRaw(::grpc::ClientContext* context, const ::tinysns::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* AsyncPostTimelineRaw(::grpc::ClientContext* context, const ::tinysns::NewPosting& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinysns::ReplyStatus>* PrepareAsyncPostTimelineRaw(::grpc::ClientContext* context, const ::tinysns::NewPosting& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetMaster_;
    const ::grpc::internal::RpcMethod rpcmethod_MasterUp_;
    const ::grpc::internal::RpcMethod rpcmethod_MasterDown_;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_GetList_;
    const ::grpc::internal::RpcMethod rpcmethod_Follow_;
    const ::grpc::internal::RpcMethod rpcmethod_Unfollow_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTimeline_;
    const ::grpc::internal::RpcMethod rpcmethod_PostTimeline_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetMaster(::grpc::ServerContext* context, const ::tinysns::NoMessage* request, ::tinysns::ServerInfo* response);
    virtual ::grpc::Status MasterUp(::grpc::ServerContext* context, const ::tinysns::ServerInfo* request, ::tinysns::ReplyStatus* response);
    virtual ::grpc::Status MasterDown(::grpc::ServerContext* context, const ::tinysns::ServerInfo* request, ::tinysns::ReplyStatus* response);
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::tinysns::User* request, ::tinysns::ReplyStatus* response);
    virtual ::grpc::Status GetList(::grpc::ServerContext* context, const ::tinysns::User* request, ::grpc::ServerWriter< ::tinysns::User>* writer);
    virtual ::grpc::Status Follow(::grpc::ServerContext* context, const ::tinysns::FollowOp* request, ::tinysns::ReplyStatus* response);
    virtual ::grpc::Status Unfollow(::grpc::ServerContext* context, const ::tinysns::FollowOp* request, ::tinysns::ReplyStatus* response);
    virtual ::grpc::Status GetTimeline(::grpc::ServerContext* context, const ::tinysns::User* request, ::grpc::ServerWriter< ::tinysns::Posting>* writer);
    virtual ::grpc::Status PostTimeline(::grpc::ServerContext* context, const ::tinysns::NewPosting* request, ::tinysns::ReplyStatus* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMaster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetMaster() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetMaster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMaster(::grpc::ServerContext* context, const ::tinysns::NoMessage* request, ::tinysns::ServerInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMaster(::grpc::ServerContext* context, ::tinysns::NoMessage* request, ::grpc::ServerAsyncResponseWriter< ::tinysns::ServerInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MasterUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MasterUp() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_MasterUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MasterUp(::grpc::ServerContext* context, const ::tinysns::ServerInfo* request, ::tinysns::ReplyStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMasterUp(::grpc::ServerContext* context, ::tinysns::ServerInfo* request, ::grpc::ServerAsyncResponseWriter< ::tinysns::ReplyStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MasterDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MasterDown() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_MasterDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MasterDown(::grpc::ServerContext* context, const ::tinysns::ServerInfo* request, ::tinysns::ReplyStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMasterDown(::grpc::ServerContext* context, ::tinysns::ServerInfo* request, ::grpc::ServerAsyncResponseWriter< ::tinysns::ReplyStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::tinysns::User* request, ::tinysns::ReplyStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::tinysns::User* request, ::grpc::ServerAsyncResponseWriter< ::tinysns::ReplyStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetList() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* context, const ::tinysns::User* request, ::grpc::ServerWriter< ::tinysns::User>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetList(::grpc::ServerContext* context, ::tinysns::User* request, ::grpc::ServerAsyncWriter< ::tinysns::User>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Follow() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Follow(::grpc::ServerContext* context, const ::tinysns::FollowOp* request, ::tinysns::ReplyStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFollow(::grpc::ServerContext* context, ::tinysns::FollowOp* request, ::grpc::ServerAsyncResponseWriter< ::tinysns::ReplyStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Unfollow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Unfollow() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Unfollow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unfollow(::grpc::ServerContext* context, const ::tinysns::FollowOp* request, ::tinysns::ReplyStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnfollow(::grpc::ServerContext* context, ::tinysns::FollowOp* request, ::grpc::ServerAsyncResponseWriter< ::tinysns::ReplyStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTimeline() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimeline(::grpc::ServerContext* context, const ::tinysns::User* request, ::grpc::ServerWriter< ::tinysns::Posting>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTimeline(::grpc::ServerContext* context, ::tinysns::User* request, ::grpc::ServerAsyncWriter< ::tinysns::Posting>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PostTimeline() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_PostTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostTimeline(::grpc::ServerContext* context, const ::tinysns::NewPosting* request, ::tinysns::ReplyStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostTimeline(::grpc::ServerContext* context, ::tinysns::NewPosting* request, ::grpc::ServerAsyncResponseWriter< ::tinysns::ReplyStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetMaster<WithAsyncMethod_MasterUp<WithAsyncMethod_MasterDown<WithAsyncMethod_Login<WithAsyncMethod_GetList<WithAsyncMethod_Follow<WithAsyncMethod_Unfollow<WithAsyncMethod_GetTimeline<WithAsyncMethod_PostTimeline<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetMaster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetMaster() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetMaster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMaster(::grpc::ServerContext* context, const ::tinysns::NoMessage* request, ::tinysns::ServerInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MasterUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MasterUp() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_MasterUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MasterUp(::grpc::ServerContext* context, const ::tinysns::ServerInfo* request, ::tinysns::ReplyStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MasterDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MasterDown() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_MasterDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MasterDown(::grpc::ServerContext* context, const ::tinysns::ServerInfo* request, ::tinysns::ReplyStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::tinysns::User* request, ::tinysns::ReplyStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetList() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* context, const ::tinysns::User* request, ::grpc::ServerWriter< ::tinysns::User>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Follow() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Follow(::grpc::ServerContext* context, const ::tinysns::FollowOp* request, ::tinysns::ReplyStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Unfollow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Unfollow() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Unfollow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unfollow(::grpc::ServerContext* context, const ::tinysns::FollowOp* request, ::tinysns::ReplyStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTimeline() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimeline(::grpc::ServerContext* context, const ::tinysns::User* request, ::grpc::ServerWriter< ::tinysns::Posting>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PostTimeline() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_PostTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostTimeline(::grpc::ServerContext* context, const ::tinysns::NewPosting* request, ::tinysns::ReplyStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMaster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetMaster() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::tinysns::NoMessage, ::tinysns::ServerInfo>(std::bind(&WithStreamedUnaryMethod_GetMaster<BaseClass>::StreamedGetMaster, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetMaster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMaster(::grpc::ServerContext* context, const ::tinysns::NoMessage* request, ::tinysns::ServerInfo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMaster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tinysns::NoMessage,::tinysns::ServerInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MasterUp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_MasterUp() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::tinysns::ServerInfo, ::tinysns::ReplyStatus>(std::bind(&WithStreamedUnaryMethod_MasterUp<BaseClass>::StreamedMasterUp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MasterUp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MasterUp(::grpc::ServerContext* context, const ::tinysns::ServerInfo* request, ::tinysns::ReplyStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMasterUp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tinysns::ServerInfo,::tinysns::ReplyStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MasterDown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_MasterDown() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::tinysns::ServerInfo, ::tinysns::ReplyStatus>(std::bind(&WithStreamedUnaryMethod_MasterDown<BaseClass>::StreamedMasterDown, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MasterDown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MasterDown(::grpc::ServerContext* context, const ::tinysns::ServerInfo* request, ::tinysns::ReplyStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMasterDown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tinysns::ServerInfo,::tinysns::ReplyStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::tinysns::User, ::tinysns::ReplyStatus>(std::bind(&WithStreamedUnaryMethod_Login<BaseClass>::StreamedLogin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* context, const ::tinysns::User* request, ::tinysns::ReplyStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tinysns::User,::tinysns::ReplyStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Follow() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::tinysns::FollowOp, ::tinysns::ReplyStatus>(std::bind(&WithStreamedUnaryMethod_Follow<BaseClass>::StreamedFollow, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Follow(::grpc::ServerContext* context, const ::tinysns::FollowOp* request, ::tinysns::ReplyStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFollow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tinysns::FollowOp,::tinysns::ReplyStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Unfollow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Unfollow() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::tinysns::FollowOp, ::tinysns::ReplyStatus>(std::bind(&WithStreamedUnaryMethod_Unfollow<BaseClass>::StreamedUnfollow, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Unfollow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Unfollow(::grpc::ServerContext* context, const ::tinysns::FollowOp* request, ::tinysns::ReplyStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnfollow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tinysns::FollowOp,::tinysns::ReplyStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PostTimeline() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::tinysns::NewPosting, ::tinysns::ReplyStatus>(std::bind(&WithStreamedUnaryMethod_PostTimeline<BaseClass>::StreamedPostTimeline, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PostTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostTimeline(::grpc::ServerContext* context, const ::tinysns::NewPosting* request, ::tinysns::ReplyStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostTimeline(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tinysns::NewPosting,::tinysns::ReplyStatus>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetMaster<WithStreamedUnaryMethod_MasterUp<WithStreamedUnaryMethod_MasterDown<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Follow<WithStreamedUnaryMethod_Unfollow<WithStreamedUnaryMethod_PostTimeline<Service > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetList() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler< ::tinysns::User, ::tinysns::User>(std::bind(&WithSplitStreamingMethod_GetList<BaseClass>::StreamedGetList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetList(::grpc::ServerContext* context, const ::tinysns::User* request, ::grpc::ServerWriter< ::tinysns::User>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetList(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tinysns::User,::tinysns::User>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetTimeline() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::SplitServerStreamingHandler< ::tinysns::User, ::tinysns::Posting>(std::bind(&WithSplitStreamingMethod_GetTimeline<BaseClass>::StreamedGetTimeline, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTimeline(::grpc::ServerContext* context, const ::tinysns::User* request, ::grpc::ServerWriter< ::tinysns::Posting>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetTimeline(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tinysns::User,::tinysns::Posting>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetList<WithSplitStreamingMethod_GetTimeline<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetMaster<WithStreamedUnaryMethod_MasterUp<WithStreamedUnaryMethod_MasterDown<WithStreamedUnaryMethod_Login<WithSplitStreamingMethod_GetList<WithStreamedUnaryMethod_Follow<WithStreamedUnaryMethod_Unfollow<WithSplitStreamingMethod_GetTimeline<WithStreamedUnaryMethod_PostTimeline<Service > > > > > > > > > StreamedService;
};

}  // namespace tinysns


#endif  // GRPC_tinysns_2eproto__INCLUDED
